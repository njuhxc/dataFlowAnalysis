{
  "name": "ecsptr",
  "version": "0.1.0",
  "author": {
    "name": "Max Schaefer",
    "email": "schaefer@ntu.edu.sg"
  },
  "description": "Simple Andersen-style pointer analysis for JavaScript",
  "dependencies": {
    "amdefine": "*",
    "webidl2": "*",
    "ecspat-util": "https://github.com/ecspat/util/tarball/master"
  },
  "license": "Eclipse",
  "readme": "ECMAScript Pointer Analysis\n===========================\n\nThis is a simple Andersen-style pointer analysis for JavaScript, itself implemented in JavaScript.\n\nInstallation\n------------\n\nRun `npm install` in this directory to pull in dependencies.\n\n\nOverview\n--------\n\nThe main analysis is implemented in `analysis.js`, which uses the solver in `solver.js`. The solver, in turn, relies on `absvars.js` and `absvals.js` for managing abstract variables and values, respectively. The standard library model is in `stdlib_model.js`; the DOM model in `dom_model.js` is generated by running `idl2js.js` on the WebIDL specifications in directory `idl`.",
  "readmeFilename": "README.md",
  "_id": "ecsptr@0.1.0",
  "dist": {
    "shasum": "03916657e612fde87cfb2a6eb96e1d2746079ea4"
  },
  "_from": "https://github.com/ecspat/ecsptr/tarball/master",
  "_resolved": "https://github.com/ecspat/ecsptr/tarball/master"
}
